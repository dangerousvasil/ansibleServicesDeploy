---
- name: Get service base path
  set_fact: code_base_path="{{ releases_path }}/{{ service_name }}"

- name: Get service releases path
  set_fact: releases_path="{{ code_base_path }}/releases"

- name: Get current release
  shell: echo `readlink -f {{ code_base_path }}/{{ current_release_dir }}`
  register: current_version

- name:  Get current version
  set_fact: current_version="{{ current_version.stdout | basename }}"

- name:  Get all release versions
  command: ls -1t {{ releases_path }}
  register: last_versions

- name:  Get all release versions
  set_fact: last_versions="{{ last_versions.stdout | regex_findall('([0-9]{14}Z)') }}"

# filter only old
- name: Get rollback release versions
  set_fact: last_versions="{% for last_version in last_versions %}{% if last_version < current_version %} {{ last_version }} {% endif %}{% endfor %}"

- name:  Get rollback release versions
  set_fact: last_versions="{{ last_versions | regex_findall('([0-9]{14}Z)') }}"

- name:  Check suitable released
  fail:
    msg: "Could not roll back the code because there is no prior release"
  when: last_versions|count|int < 1

- name:  Get last release version
  set_fact: last_version="{{ last_versions | max }}"

- stat:
    path: "{{ releases_path }}/{{ last_version }}"
  register: stat_rollback_release_version
  when: last_version != ""

- name:  Check is suitable release
  fail:
    msg: "Could not roll back the code because there is no prior release"
  when:  last_version != "" and (stat_rollback_release_version.stat.exists is not defined or stat_rollback_release_version.stat.isdir == False)

- debug:
    msg: "Current release version {{ current_version }}. Rollback version {{ last_version }}"

- name: Remove current link
  file:
    state: absent
    path: "{{ code_base_path }}/{{ current_release_dir }}"

# Performs symlink exchange
- name:  Change softlink to rollback release
  file:
    state: link
    path: "{{ code_base_path }}/{{ current_release_dir }}"
    src: "{{ releases_path }}/{{ last_version }}"
